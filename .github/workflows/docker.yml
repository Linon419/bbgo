# syntax=docker/dockerfile:1.7

ARG GO_VERSION=1.23
ARG NODE_VERSION=20

# ---------- Stage 1: Build UI (workspaces at repo root) ----------
FROM node:${NODE_VERSION}-alpine AS ui
WORKDIR /src
# 用 corepack 管理 yarn
RUN corepack enable && corepack prepare yarn@stable --activate

# 先拷“根目录”的依赖清单，命中缓存（适配 Yarn Berry/Classic）
COPY package.json yarn.lock .yarnrc.yml* ./
# 若是 Yarn Berry，需要 .yarn 目录
COPY .yarn/ .yarn/ 2>/dev/null || true
# 再把子包的 package.json 放进去以便解析 workspace
COPY apps/frontend/package.json apps/frontend/

# 在仓库根目录安装依赖（workspace 正确做法）
# 严格模式会因为锁文件不一致而失败；回退到非严格安装保证构建不被卡住
RUN sh -lc 'if yarn -v | grep -qE "^[2-9]"; then yarn install --immutable || yarn install; else yarn install --frozen-lockfile || yarn install; fi'

# 拷源码并构建前端
COPY . .
RUN yarn --cwd apps/frontend build

# ---------- Stage 2: Build Go binary (embed UI) ----------
FROM golang:${GO_VERSION}-alpine3.20 AS builder
RUN apk add --no-cache git ca-certificates gcc musl-dev libc-dev pkgconfig make
WORKDIR /src
COPY . .
# 用上一步已构建好的前端产物（确保 go:embed 能打包）
COPY --from=ui /src/apps/frontend /src/apps/frontend

ENV CGO_ENABLED=1
# 预热缓存并构建
RUN --mount=type=cache,target=/go/pkg/mod \
    --mount=type=cache,target=/root/.cache/go-build \
    go mod download
RUN --mount=type=cache,target=/go/pkg/mod \
    --mount=type=cache,target=/root/.cache/go-build \
    make bbgo || go build -o ./bbgo ./cmd/bbgo

# 统一产物
RUN mkdir -p /out && \
    if [ -x ./bbgo ]; then cp ./bbgo /out/bbgo; else cp ./cmd/bbgo/bbgo /out/bbgo; fi

# ---------- Stage 3: Runtime ----------
FROM alpine:3.20
RUN apk add --no-cache ca-certificates tzdata
ENV USER=bbgo
RUN adduser -D -G wheel "$USER"
USER ${USER}
WORKDIR /home/${USER}
COPY --from=builder /out/bbgo /usr/local/bin/bbgo
EXPOSE 8080
ENTRYPOINT ["/usr/local/bin/bbgo"]
CMD ["run","--config","/config/bbgo.yaml","--enable-webserver","--debug"]
