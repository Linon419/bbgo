// Code generated by "callbackgen -type Stream"; DO NOT EDIT.

package bitfinex

import (
	"github.com/c9s/bbgo/pkg/exchange/bitfinex/bfxapi"
)

func (s *Stream) OnTickerEvent(cb func(e *bfxapi.TickerEvent)) {
	s.tickerEventCallbacks = append(s.tickerEventCallbacks, cb)
}

func (s *Stream) EmitTickerEvent(e *bfxapi.TickerEvent) {
	for _, cb := range s.tickerEventCallbacks {
		cb(e)
	}
}

func (s *Stream) OnBookUpdateEvent(cb func(e *bfxapi.BookUpdateEvent)) {
	s.bookUpdateEventCallbacks = append(s.bookUpdateEventCallbacks, cb)
}

func (s *Stream) EmitBookUpdateEvent(e *bfxapi.BookUpdateEvent) {
	for _, cb := range s.bookUpdateEventCallbacks {
		cb(e)
	}
}

func (s *Stream) OnBookSnapshotEvent(cb func(e *bfxapi.BookSnapshotEvent)) {
	s.bookSnapshotEventCallbacks = append(s.bookSnapshotEventCallbacks, cb)
}

func (s *Stream) EmitBookSnapshotEvent(e *bfxapi.BookSnapshotEvent) {
	for _, cb := range s.bookSnapshotEventCallbacks {
		cb(e)
	}
}

func (s *Stream) OnFundingBookEvent(cb func(e *bfxapi.FundingBookUpdateEvent)) {
	s.fundingBookEventCallbacks = append(s.fundingBookEventCallbacks, cb)
}

func (s *Stream) EmitFundingBookEvent(e *bfxapi.FundingBookUpdateEvent) {
	for _, cb := range s.fundingBookEventCallbacks {
		cb(e)
	}
}

func (s *Stream) OnFundingBookSnapshotEvent(cb func(e *bfxapi.FundingBookSnapshotEvent)) {
	s.fundingBookSnapshotEventCallbacks = append(s.fundingBookSnapshotEventCallbacks, cb)
}

func (s *Stream) EmitFundingBookSnapshotEvent(e *bfxapi.FundingBookSnapshotEvent) {
	for _, cb := range s.fundingBookSnapshotEventCallbacks {
		cb(e)
	}
}

func (s *Stream) OnCandleEvent(cb func(e *bfxapi.CandleEvent)) {
	s.candleEventCallbacks = append(s.candleEventCallbacks, cb)
}

func (s *Stream) EmitCandleEvent(e *bfxapi.CandleEvent) {
	for _, cb := range s.candleEventCallbacks {
		cb(e)
	}
}

func (s *Stream) OnStatusEvent(cb func(e *bfxapi.StatusEvent)) {
	s.statusEventCallbacks = append(s.statusEventCallbacks, cb)
}

func (s *Stream) EmitStatusEvent(e *bfxapi.StatusEvent) {
	for _, cb := range s.statusEventCallbacks {
		cb(e)
	}
}

func (s *Stream) OnMarketTradeEvent(cb func(e *bfxapi.MarketTradeEvent)) {
	s.marketTradeEventCallbacks = append(s.marketTradeEventCallbacks, cb)
}

func (s *Stream) EmitMarketTradeEvent(e *bfxapi.MarketTradeEvent) {
	for _, cb := range s.marketTradeEventCallbacks {
		cb(e)
	}
}
